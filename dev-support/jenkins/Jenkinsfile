#!/usr/bin/env groovy
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

pipeline {

    agent {
        label 'hbase'
    }

    options {
        // N.B. this is per-branch, which means per PR
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timeout (time: 1, unit: 'HOURS')
        timestamps()
        skipDefaultCheckout()
    }

    environment {
        SOURCEDIR_REL = 'src'
        PATCHDIR_REL = 'output'
        YETUS_DRIVER_REL = "${SOURCEDIR_REL}/dev-support/jenkins/jenkins_precommit_github_yetus.sh"
        ARCHIVE_PATTERN_LIST = 'TEST-*.xml'
        WORKDIR_REL = 'yetus-precommit-check'
        BUILD_URL_ARTIFACTS = "artifact/${WORKDIR_REL}/${PATCHDIR_REL}"
        WORKDIR = "${WORKSPACE}/${WORKDIR_REL}"
        SOURCEDIR = "${WORKDIR}/${SOURCEDIR_REL}"
        PATCHDIR = "${WORKDIR}/${PATCHDIR_REL}"
        SOURCE_BRANCH = "${BUILD_TAG}"
        DOCKER_TAG = "jenkins/hbase/kustomize/kuttl:${SOURCE_BRANCH}"
        YETUS_DRIVER = "${WORKDIR}/${YETUS_DRIVER_REL}"
        PLUGINS = 'all,-bugzilla,-gitlab,-jira'
        BUILDKIT_PROGRESS = 'plain'
    }

    parameters {
        booleanParam(name: 'DEBUG',
               defaultValue: false,
               description: 'Print extra outputs for debugging the jenkins job and yetus')
    }

    stages {
        stage ('precommit checks') {
            steps {
                sh label: 'printenv', script: '''#!/bin/bash -e
                    printenv 2>&1 | sort
                '''
                dir("${SOURCEDIR}") {
                    checkout scm
                }
                dir("${SOURCEDIR}") {
                    sh label: 'build_docker_image.sh kuttl', script: '''#!/bin/bash -e
                        ./dev-support/jenkins/build_docker_image.sh kuttl --load
                        docker image ls
                    '''
                }
                dir("${WORKDIR}") {
                    withCredentials([
                      usernamePassword(
                        credentialsId: 'apache-hbase-at-github.com',
                        passwordVariable: 'GITHUB_TOKEN',
                        usernameVariable: 'GITHUB_USER'
                        )]) {
                        script {
                            def ret = sh(
                                label: 'test-patch',
                                returnStatus: true,
                                script: '''#!/bin/bash -e
                                    echo "[INFO] Launching Yetus via ${YETUS_DRIVER}"
                                    "${YETUS_DRIVER}"
                                '''
                            )
                            if (ret != 0) {
                                // mark the build as UNSTABLE instead of FAILURE, to avoid skipping the later publish of
                                // test output. See HBASE-26339 for more details.
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
            post {
                always {
                    // Has to be relative to WORKSPACE.
                    archiveArtifacts artifacts: "${WORKDIR_REL}/${PATCHDIR_REL}/*", excludes: "${WORKDIR_REL}/${PATCHDIR_REL}/precommit"
                    archiveArtifacts artifacts: "${WORKDIR_REL}/${PATCHDIR_REL}/**/*", excludes: "${WORKDIR_REL}/${PATCHDIR_REL}/precommit/**/*"
                    publishHTML target: [
                      allowMissing: true,
                      keepAll: true,
                      alwaysLinkToLastBuild: true,
                      // Has to be relative to WORKSPACE
                      reportDir: "${WORKDIR_REL}/${PATCHDIR_REL}",
                      reportFiles: 'report.html',
                      reportName: 'PR General Check Report'
                    ]
                }
                // Jenkins pipeline jobs fill slaves on PRs without this :(
                cleanup() {
                    script {
                        sh label: 'Cleanup workspace', script: '''#!/bin/bash -e
                            # See YETUS-764
                            if [ -f "${PATCHDIR}/pidfile.txt" ]; then
                              echo "test-patch process appears to still be running: killing"
                              kill `cat "${PATCHDIR}/pidfile.txt"` || true
                              sleep 10
                            fi
                            if [ -f "${PATCHDIR}/cidfile.txt" ]; then
                              echo "test-patch container appears to still be running: killing"
                              docker kill `cat "${PATCHDIR}/cidfile.txt"` || true
                            fi
                            # See HADOOP-13951
                            chmod -R u+rxw "${WORKSPACE}"
                        '''
                        dir ("${WORKDIR}") {
                            deleteDir()
                        }
                    }
                }
            }
        }
    }

    post {
        // Jenkins pipeline jobs fill slaves on PRs without this :(
        cleanup() {
            script {
                sh label: 'Cleanup workspace', script: '''#!/bin/bash -e
                    # See HADOOP-13951
                    chmod -R u+rxw "${WORKSPACE}"
                    '''
                deleteDir()
            }
        }
    }
}
